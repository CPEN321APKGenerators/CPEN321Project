name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.2
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "."
          target: "/home/ubuntu/cpen321journal"
        
      - name: Rebuild and Deploy
        uses: appleboy/ssh-action@v0.1.2
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            # Start a new session for each command for multiple sessions support
            set -e  # Exit on error


            echo "Creating config directory"
            mkdir -p /home/ubuntu/cpen321journal/Backend/src/config
            echo "Config directory created"


            echo "Writing secrets to config files"
            echo '${{ secrets.GOOGLE_CLOUD_KEY_FIREBASE }}' > /home/ubuntu/cpen321journal/Backend/src/config/cpen321project-c324e-firebase-adminsdk.json
            echo '${{ secrets.STRIPE_SECRET }}' > /home/ubuntu/cpen321journal/Backend/src/config/cpen321project-stripe-secret.txt
            echo '${{ secrets.SERVER_SECRET }}' > /home/ubuntu/cpen321journal/Backend/src/config/serverSecret.txt
            chmod 600 /home/ubuntu/cpen321journal/Backend/src/config/*


            echo "Writing environment variables to .env file"
            cat > /home/ubuntu/cpen321journal/Backend/.env <<EOF
            PORT=${{ secrets.PROD_PORT }}
            DB_URI=${{ secrets.PROD_DB_URI }}
            EOF
            chmod 600 /home/ubuntu/cpen321journal/Backend/.env


            echo "Stopping existing container and rebuilding"
            cd /home/ubuntu/cpen321journal/Backend
            docker-compose down
            docker-compose --env-file .env build
            docker-compose --env-file .env up -d
            echo "Deployment complete!"
        new_session: true  



          # - name: Install Stripe CLI
          #   run: |
          #     curl -s https://api.github.com/repos/stripe/stripe-cli/releases/latest \
          #     | grep "browser_download_url.*linux_x86_64.tar.gz" \
          #     | cut -d '"' -f 4 \
          #     | wget -i -
          #     tar -xvf stripe_*.tar.gz
          #     sudo mv stripe /usr/local/bin/
          #     stripe version  # Verify the installation
          
          # - name: Set up Stripe Webhook
          #   working-directory: ./Backend
          #   run: stripe listen

            
name: Deploy to EC2

on:
    push:
        branches:
            - main
jobs:
    deploy:
        runs-on: ubuntu-latest
        steps:
          - name: Checkout
            uses: actions/checkout@v3
            
          - name: Copy files to EC2
            uses: appleboy/scp-action@master
            with:
                host: ${{secrets.EC2_HOST}}
                username: ${{secrets.EC2_USER}}
                key: ${{secrets.EC2_KEY}}
                source: "."
                target: "/home/ubuntu/cpen321journal"
            
          - name: Rebuild and Deploy
            uses: appleboy/ssh-action@master
            with:
                host: ${{secrets.EC2_HOST}}
                username: ${{secrets.EC2_USER}}
                key: ${{secrets.EC2_KEY}}
                script: |
                    cd /home/ubuntu/cpen321journal/Backend

                    # Create the config directory
                    mkdir -p config

                    # Write the JSON file directly on EC2
                    echo '${{ secrets.GOOGLE_CLOUD_KEY_FIREBASE }}' > src/config/cpen321project-c324e-firebase-adminsdk.json
                    echo '${{ secrets.STRIPE_SECRET }}' > src/config/cpen321project-stripe-secret.txt
                    echo '${{ secrets.SERVER_SECRET }}' > src/config/serverSecret.txt

                    # Give permissions to the JSON file
                    chmod 600 src/config/cpen321project-c324e-firebase-adminsdk.json
                    chmod 600 src/config/cpen321project-stripe-secret.txt
                    chmod 600 src/config/serverSecret.txt

                    # Write secrets into - env
                    cat > .env <<EOF
                    PORT=${{secrets.PROD_PORT}}
                    DB_URI=${{secrets.PROD_DB_URI}}
                    EOF

                    # Give -env permissions
                    chmod 600 .env

                    # Build and run container
                    docker-compose down
                    docker-compose --env-file .env build
                    docker-compose --env-file .env up -d

          # - name: Install Stripe CLI
          #   run: |
          #     curl -s https://api.github.com/repos/stripe/stripe-cli/releases/latest \
          #     | grep "browser_download_url.*linux_x86_64.tar.gz" \
          #     | cut -d '"' -f 4 \
          #     | wget -i -
          #     tar -xvf stripe_*.tar.gz
          #     sudo mv stripe /usr/local/bin/
          #     stripe version  # Verify the installation
          
          # - name: Set up Stripe Webhook
          #   working-directory: ./Backend
          #   run: stripe listen